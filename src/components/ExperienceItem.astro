---
interface Props {
    year: string
    title: string
    description: string
    href?: string
}
const { year, title, description, href } = Astro.props
---

<div class="timeline-item opacity-0 translate-y-5 transition-all duration-500 ease-in-out mt-2">
    <div class="absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -start-[22px] border border-white dark:border-gray-900 dark:bg-gray-700"></div>
    <time class="mb-1 text-sm font-normal leading-none text-green-200 dark:text-gray-500">{year}</time>
    <h3 class="text-lg font-semibold text-primary dark:text-white">{title}</h3>
    <p class="mb-4 text-base font-normal text-gray-400 dark:text-gray-400 text-pretty">{description}</p>
    {href && (
        <a href={href} class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:outline-none focus:ring-gray-100 focus:text-blue-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
            Learn more
            <svg class="w-3 h-3 ms-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
            </svg>
        </a>
    )}
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("opacity-100", "translate-y-0");
            entry.target.classList.remove("opacity-0", "translate-y-5");
          }else {
            // Vuelve a ocultar el elemento cuando sale del viewport
            entry.target.classList.remove("opacity-100", "translate-y-0");
            entry.target.classList.add("opacity-0", "translate-y-5");
          }
        });
      },
      {
        threshold: 0.5,
      }
    );

    document.querySelectorAll(".timeline-item").forEach((item) => {
      observer.observe(item);
    });
  });
</script>
